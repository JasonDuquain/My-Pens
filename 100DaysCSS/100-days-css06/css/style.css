@import url("https://fonts.googleapis.com/css2?family=Open+Sans:wght@300;400;600;700&display=swap");
:root {
  box-sizing: border-box;
  --aqua: hsl(208, 60%, 50%);
}

*, ::before, ::after {
  box-sizing: inherit;
  text-decoration: none;
  list-style-type: none;
  margin: 0;
  padding: 0;
}

.frame {
  position: absolute;
  top: 50%;
  left: 50%;
  width: 400px;
  height: 400px;
  margin-top: -200px;
  margin-left: -200px;
  border-radius: 2px;
  box-shadow: 4px 8px 16px 0 rgba(0, 0, 0, 0.1);
  overflow: hidden;
  background: #274159;
  color: #333;
  font-family: 'Open Sans', Helvetica, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  display: flex;
  align-items: center;
  justify-content: center;
}

.notif {
  width: 75%;
  height: 75%;
  background-color: #fff;
  border-radius: 3px;
  display: flex;
  flex-direction: column;
  position: relative;
  transition: all 700ms ease-in;
  z-index: 5;
}

.notif.move {
  transform: translateX(10em);
}

.notif__header {
  background-color: var(--aqua);
  flex: 1;
  display: flex;
  align-items: center;
  justify-content: space-around;
  position: relative;
  perspective: 300px;
}

.notif__svg {
  cursor: pointer;
  width: 40px;
  height: 40px;
}

.notif__svg line {
  stroke-opacity: .6;
  stroke: #fff;
  stroke-width: 4px;
  transition: all 300ms ease-out;
}

.notif__svg:hover line {
  stroke-opacity: 1;
}

.notif__svg circle {
  fill: #fff;
  fill-opacity: .6;
  transition: all 300ms ease-out;
}

.notif__svg:hover circle {
  fill-opacity: 1;
}

.notif__heading {
  color: #fff;
  font-size: 1em;
  font-weight: 600;
  transform: translateX(-0.5em);
}

.notif__magnify {
  width: 20px;
  height: 20px;
  fill: rgba(255, 255, 255, 0.7);
  cursor: pointer;
  transition: all 300ms ease-out;
}

.notif__magnify:hover {
  fill: white;
}

.notif__search {
  width: 14em;
  padding: .75em .75em .75em 1.5em;
  border-radius: 99em;
  border: none;
  font: inherit;
  font-size: .9em;
  /* make this flex child essentially NOT flex element -- could also use the flex-wrap: wrap and make it 100% width */
  position: absolute;
  left: 50%;
  top: -30%;
  transform: translate(-50%) rotateX(90deg);
  opacity: 0;
  display: block;
  transition: all 800ms;
}

.notif__search.visible {
  opacity: 1;
  top: 50%;
  transform: translate(-50%, -50%) rotateX(0deg);
}

.notif__body {
  flex: 4;
  padding-left: 2em;
  color: #000;
}

.notif__list {
  border-left: 3px solid #cfbfbf;
  height: 100%;
  padding: 1.5em .75em 0 1em;
}

.notif__item {
  padding-bottom: 1.5em;
  position: relative;
  transform: translateY(6em);
  opacity: 0;
  transition: all 800ms 400ms ease-in;
}

.notif__item.visible {
  transform: translateY(0);
  opacity: 1;
}

.notif__item:nth-of-type(2) {
  transition-delay: 800ms;
}

.notif__item:last-of-type {
  transition-delay: 1200ms;
}

.notif__item::after {
  position: absolute;
  content: "";
  width: .75em;
  height: .75em;
  border-radius: 50%;
  border: 2px solid var(--aqua);
  background-color: #fff;
  left: -1.43em;
  top: .1em;
}

.notif__date {
  font-size: .8em;
}

.notif__update {
  font-size: .9em;
  line-height: 1.3;
}

.notif__update span {
  font-weight: 600;
}

.notif__slideout {
  position: absolute;
  top: 0;
  left: 0;
  background-color: #385b7a;
  top: 15%;
  border-radius: 3px;
  height: 70%;
  width: 40%;
  left: 20%;
  z-index: 2;
  transition: all 700ms ease-in;
}

.notif__slideout.move {
  left: 16%;
}

.notif__slideout-list {
  color: rgba(255, 255, 255, 0.6);
  font-size: .9em;
  padding: 1.5em 0;
  display: flex;
  flex-direction: column;
  height: 100%;
}

.notif__slideout-item {
  display: flex;
  align-items: center;
  transition: all 350ms ease-out;
  padding: 1.15em 1em;
  color: rgba(255, 255, 255, 0.6);
}

.notif__slideout-item:hover {
  background-color: #182734;
}

.notif__slideout-item:hover .notif__slideout-icon {
  fill: #fff;
}

.notif__slideout-item:hover .notif__slideout-text {
  color: #fff;
}

.notif__slideout-icon {
  fill: rgba(255, 255, 255, 0.6);
}

.notif__slideout-text {
  color: #fff;
  margin-left: .5em;
  color: rgba(255, 255, 255, 0.6);
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
